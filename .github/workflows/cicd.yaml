name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew build -x test
      
      - name: Run tests with JaCoCo
        run: ./gradlew test jacocoTestReport
      
      - name: SonarQube Analysis - Member Service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :member:sonar \
            -Dsonar.projectKey=lifesub-member-${{ vars.TEAM_ID }} \
            -Dsonar.projectName=lifesub-member-${{ vars.TEAM_ID }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
      
      - name: SonarQube Analysis - Mysub Service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :mysub-infra:sonar \
            -Dsonar.projectKey=lifesub-mysub-${{ vars.TEAM_ID }} \
            -Dsonar.projectName=lifesub-mysub-${{ vars.TEAM_ID }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
      
      - name: SonarQube Analysis - Recommend Service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :recommend:sonar \
            -Dsonar.projectKey=lifesub-recommend-${{ vars.TEAM_ID }} \
            -Dsonar.projectName=lifesub-recommend-${{ vars.TEAM_ID }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            member/build/libs/
            mysub-infra/build/libs/
            recommend/build/libs/
            deployment/
  
  release:
    name: Build and Push Docker Images
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Load environment variables
        run: |
          while IFS= read -r line; do
            # Skip comments and empty lines
            [[ $line =~ ^\s*# ]] || [[ -z $line ]] && continue
            # Set each variable
            echo "$line" >> $GITHUB_ENV
          done < deployment/deploy_env_vars
      
      - name: Set Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Image tag set to: ${IMAGE_TAG}"
      
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and Push Member Service Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          build-args: |
            BUILD_LIB_DIR=member/build/libs
            ARTIFACTORY_FILE=member.jar
          tags: ${{ env.registry }}/${{ env.image_org }}/member:${{ steps.set_image_tag.outputs.image_tag }}
      
      - name: Build and Push Mysub Service Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          build-args: |
            BUILD_LIB_DIR=mysub-infra/build/libs
            ARTIFACTORY_FILE=mysub.jar
          tags: ${{ env.registry }}/${{ env.image_org }}/mysub:${{ steps.set_image_tag.outputs.image_tag }}
      
      - name: Build and Push Recommend Service Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          build-args: |
            BUILD_LIB_DIR=recommend/build/libs
            ARTIFACTORY_FILE=recommend.jar
          tags: ${{ env.registry }}/${{ env.image_org }}/recommend:${{ steps.set_image_tag.outputs.image_tag }}
  
  deploy:
    name: Deploy to Kubernetes
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Load environment variables
        run: |
          while IFS= read -r line; do
            # Skip comments and empty lines
            [[ $line =~ ^\s*# ]] || [[ -z $line ]] && continue
            # Set each variable
            echo "$line" >> $GITHUB_ENV
          done < deployment/deploy_env_vars
      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: rg-digitalgarage-02
          cluster-name: aks-digitalgarage-02
      
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Generate Kubernetes manifest
        run: |
          # Set image paths with the generated tag
          export member_image_path=${{ env.registry }}/${{ env.image_org }}/member:${{ needs.release.outputs.image_tag }}
          export mysub_image_path=${{ env.registry }}/${{ env.image_org }}/mysub:${{ needs.release.outputs.image_tag }}
          export recommend_image_path=${{ env.registry }}/${{ env.image_org }}/recommend:${{ needs.release.outputs.image_tag }}
          
          # Process environment variables for the template
          export namespace=${{ env.namespace }}
          export allowed_origins=${{ env.allowed_origins }}
          export ingress_host=${{ env.ingress_host }}
          export jwt_secret_key=${{ env.jwt_secret_key }}
          export postgres_user=${{ env.postgres_user }}
          export postgres_password=${{ env.postgres_password }}
          export replicas=${{ env.replicas }}
          export resources_requests_cpu=${{ env.resources_requests_cpu }}
          export resources_requests_memory=${{ env.resources_requests_memory }}
          export resources_limits_cpu=${{ env.resources_limits_cpu }}
          export resources_limits_memory=${{ env.resources_limits_memory }}
          
          # Generate manifest file using envsubst
          apt-get update && apt-get install -y gettext-base
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Output the manifest for debugging (sensitive info redacted)
          cat deployment/deploy.yaml | grep -v "password\|secret\|jwt"
      
      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry acr-secret \
            --namespace ${{ env.namespace }} \
            --docker-server=${{ env.registry }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          echo "Waiting for deployments to be ready..."
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s
          
          echo "Getting deployment status..."
          kubectl -n ${{ env.namespace }} get deployments
          
          echo "Getting service status..."
          kubectl -n ${{ env.namespace }} get svc
          
          echo "Getting ingress status..."
          kubectl -n ${{ env.namespace }} get ingress
